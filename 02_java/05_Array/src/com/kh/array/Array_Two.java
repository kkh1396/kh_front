package com.kh.array;

public class Array_Two {

	
	/*
	 * 2차원 배열
	 * : "같은" 자료형의 "1차원 배열의 묶음",
	 *    배열 안의 배열이 존재함 !
	 * : 2차원 배열은 할당된 공간마다 인덱스 번호를 두 개 부여
	 *  ( 앞의 번호는 몇번째 1차원 배열인지(행),
	 *     뒤의 번호는 1차원 배열에서 몇번째 인덱스인지(열) )
	 *     
	 *  - 선언 [표현식]
	 *   
	 *     자료형[][] 변수명;
	 *     -- 자료형 변수명[][];
	 *     -- 자료형[] 변수명[];
	 *  - 할당 [표현식]
	 *  
	 *   변수명 = new 자료형 [행크기][열크기];
	 *   * 행크기 : 1차원 배열의 개수
	 *   * 열크기 : 1차원 배열의 길이 (생략가능 -> 가변길이의 1차원 배열 할당)
	 *   
	 *   1차원 배열의 참조변수 묶음을 먼저 생성
	 *   변수명 = new 자료형[n][];
	 *   변수명[0] = new 자료형[m];
	 *   변수명[1] = new 자료형[x];
	 *   변수명[n-1] = new 자료형[z];
	 *   // => 1차원 배열의 크기는 같을 수도 있고, 다를 수도 있음!
	 *   
	 *  - 선언 및 할당 동시에 진행
	 *     
	 *      자료형[][] 변수명 = new 자료형[행크기[열크기];
	 *      
	 *  - 값 대입
	 *  
	 *     변수명[배열순번][인덱스] = 값;
	 *     
	 * 
	 */
	
	public static void main(String[] args) {
//		practice1();
		practice2();
	}
	
	public static void practice2() {
		/*
		 * (0행 0열) (0행 1열) (0행 2열)
		 * (1행 0열) (1행 1열) (1행 2열)
		 * (2행 0열) (2행 1열) (2행 2열) 
		 */
		
		// 위의 데이터를 저장할 2차원 배열 선언 및 할당
		// => 3행 3열의 문자열
		
		String[][] str = new String[3][3];
		
		
		for (int i=0; i<str.length;i++) {
			
			for (int j=0; j<str[i].length;j++) {
				str[i][j] = "("+i+"행"+j+"열"+")";
				System.out.print(str[i][j]+ " ");
			}
			System.out.println();
		}
		
		// 데이터 저장
		
		// 데이터 출력
	}
	
	public static void practice1() {
		// * 배열 선언
		// 정수형 2차원 배열 arr 선언
		int[][] arr ;
		
		// * 배열 할당
		// 크기가 4인 1차원 배열 3개 묶음
//		arr = new int[3][4];	// 첫번쨰 방법
		arr = new int[3][];     // 두번째 방법
//		arr[0] = new int[4];
//		arr[1] = new int[4];
//		arr[2] = new int[4];
		// => 위의 코드를 반복문을 사용하여 변경
		
		for (int i=0; i<3 ; i++) {
			arr[i] = new int[4];
		}
		
		// 첫번쨰 1차원 배열에 값을 대입
		/*
		 *  arr = { {10, 20, 30, 40},
		 *  		{0, 0, 0, 0},
		 *  		{0, 0, 0, 0}
		 *  };
		 * 
		 * 
		 * 
		 */
//		arr[0][0] = 10;
//		arr[0][1] = 20;
//		arr[0][2] = 30;
//		arr[0][3] = 40;
		// => 반복문으로 변경
		for (int i=0; i<arr[0].length; i++) {
			arr[0][i] = (i+1) * 10;
			System.out.print(arr[0][i]+" ");
		}
		
	}
}
